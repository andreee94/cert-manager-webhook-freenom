name: Test Build and Push

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  # workflow_dispatch:
  #   # Inputs the workflow accepts.
  #   inputs:
  #     name:
  #       # Friendly description to be shown in the UI instead of 'name'
  #       description: 'Test and Push to Github Registry'
  #       # Default value if no value is explicitly provided
  #       default: 'World'
  #       # Input has to be provided for the workflow to run
  #       required: true
  push:
    # branches: [ main ]
    tags:
    - 'v*'
  
  #pull_request:
  #  branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel

env:
  REGISTRY_GITHUB: ghcr.io
  REGISTRY_DOCKERHUB: andreee94
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test_build_push_release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16

##########################################

    - name: Create secret.yaml file
      run: |
          echo "$SECRET" >> testdata/freenom-solver/secret.yaml
          wc -l testdata/freenom-solver/secret.yaml
      shell: bash
      env:
        SECRET : ${{secrets.FREENOM_ACCOUNT_SECRET}}

    - name: Check secret
      run: ls -lah testdata/freenom-solver

    - name: Go version
      run: go version

    - name: Run Test
      run: TEST_ZONE_NAME="andreee94.ml." make test
      env:
        SECRET : ${{secrets.TEST_ZONE_NAME}}

    - name: Clean Test
      run: make clean

##########################################

    - name: Make the manifest.yaml file 
      run: make rendered-manifest.yaml

    - name: Set the manifest name Env
      run: echo "MANIFEST_FILE_NAME=cert-manager-freenom.yaml" >> $GITHUB_ENV
      # run: echo "MANIFEST_FILE_NAME=cert-manager-freenom-v$(cat .version).yaml" >> $GITHUB_ENV

    - name: Create the final .yaml file
      run: cp ./_out/rendered-manifest.yaml ${{ env.MANIFEST_FILE_NAME }}

    - name: Release
      uses: softprops/action-gh-release@v1
      # if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ${{ env.MANIFEST_FILE_NAME }}

##########################################

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

##########################################

    - name: Log in to the Container registry (ghcr.io)
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY_GITHUB }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker (ghcr.io)
      id: meta_github
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.REGISTRY_GITHUB }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image (ghcr.io)
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta_github.outputs.tags }}
        labels: ${{ steps.meta_github.outputs.labels }}

##########################################

    - name: Log in to the Container registry (DockerHub)
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker (DockerHub)
      id: meta_dockerhub
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.IMAGE_NAME }}

    - name: Build and push Docker image (DockerHub)
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta_dockerhub.outputs.tags }}
        labels: ${{ steps.meta_dockerhub.outputs.labels }}

    # - name: Sync DockerHub Readme (DockerHub)
    #   uses: ms-jpq/sync-dockerhub-readme@v1
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_PASSWORD }}
    #     readme: "./README.md"
        # repository: ${{ env.IMAGE_NAME }}

    - name: Sync DockerHub Readme (DockerHub)
      uses: peter-evans/dockerhub-description@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        repository: ${{ env.IMAGE_NAME }}
        readme-filepath: ./README.md

##########################################
