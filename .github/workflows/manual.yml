name: Github Registry Workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Test and Push to Github Registry'
        # Default value if no value is explicitly provided
        default: 'World'
        # Input has to be provided for the workflow to run
        required: true
  #push:
  #  branches: [ main ]
  #pull_request:
  #  branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16

##########################################

    - name: Create secret.yaml file
      run: |
          echo $SECRET >> testdata/freenom-solver/secret.yaml
      shell: bash
      env:
        SECRET : ${{secrets.FREENOM_ACCOUNT_SECRET}}

    - name: Check secret
      run: ls -lah testdata/freenom-solver

    - name: Go version
      run: go version

    - name: Run Test
      run: TEST_ZONE_NAME="andreee94.ml." make test

    - name: Clean Test
      run: make clean

##########################################

    - name: Log in to the Container registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

##########################################
